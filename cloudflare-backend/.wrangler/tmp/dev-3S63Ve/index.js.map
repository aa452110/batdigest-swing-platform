{
  "version": 3,
  "sources": ["../bundle-RMX6V4/checked-fetch.js", "../../../src/email.ts", "../../../src/index.ts", "../../../../../../../../opt/homebrew/lib/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../../../../../../opt/homebrew/lib/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-RMX6V4/middleware-insertion-facade.js", "../../../../../../../../opt/homebrew/lib/node_modules/wrangler/templates/middleware/common.ts", "../bundle-RMX6V4/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/brianduryea/Coding_Projects/batdigest-swing-analysis-project/cloudflare-backend/.wrangler/tmp/dev-3S63Ve",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "// Email sending functionality using our Mailgun email worker\n\nexport interface EmailOptions {\n  to: string;\n  from: string;\n  subject: string;\n  html: string;\n  text?: string;\n}\n\nexport async function sendEmail(options: EmailOptions): Promise<boolean> {\n  try {\n    // Use our Mailgun email worker\n    const response = await fetch('https://batdigest-email.brianduryea.workers.dev', {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n      },\n      body: JSON.stringify({\n        to: options.to,\n        subject: options.subject,\n        template: 'default',\n        data: {\n          fromName: '$500 Swing',\n          title: options.subject,\n          message: options.html,\n          // Pass the raw HTML for custom template\n          customHtml: options.html\n        }\n      }),\n    });\n\n    if (!response.ok) {\n      const error = await response.text();\n      console.error('Email worker error:', error);\n      return false;\n    }\n\n    const result = await response.json();\n    return result.success === true;\n  } catch (error) {\n    console.error('Failed to send email:', error);\n    return false;\n  }\n}\n\n// Simple HTML stripper for plain text version\nfunction stripHtml(html: string): string {\n  return html\n    .replace(/<[^>]*>/g, '')\n    .replace(/&nbsp;/g, ' ')\n    .replace(/&amp;/g, '&')\n    .replace(/&lt;/g, '<')\n    .replace(/&gt;/g, '>')\n    .replace(/&quot;/g, '\"')\n    .trim();\n}\n\n// Email templates\n// Send welcome email using the email service binding\nexport async function sendWelcomeEmailViaService(emailService: Fetcher, to: string, firstName: string, planName: string): Promise<boolean> {\n  try {\n    const response = await emailService.fetch(new Request('https://email/', {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n      },\n      body: JSON.stringify({\n        to,\n        subject: 'Welcome to $500 Swing!',\n        template: 'welcome',\n        data: {\n          firstName,\n          planName: planName.charAt(0).toUpperCase() + planName.slice(1), // Capitalize plan name\n          fromName: '$500 Swing'\n        }\n      }),\n    }));\n\n    if (!response.ok) {\n      const error = await response.text();\n      console.error('Email service error:', error);\n      return false;\n    }\n\n    const result = await response.json();\n    return result.success === true;\n  } catch (error) {\n    console.error('Failed to send welcome email via service:', error);\n    return false;\n  }\n}\n\nexport const emailTemplates = {\n  welcome: (firstName: string, planName: string) => ({\n    subject: 'Welcome to $500 Swing!',\n    html: `\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n</head>\n<body style=\"margin: 0; padding: 0; font-family: Arial, sans-serif; background-color: #f4f4f4;\">\n  <table cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"max-width: 600px; margin: 0 auto; background-color: #ffffff;\">\n    <tr>\n      <td style=\"padding: 40px 20px; text-align: center; background: linear-gradient(135deg, #0f172a 0%, #14b8a6 100%);\">\n        <h1 style=\"color: #ffffff; margin: 0; font-size: 32px;\">$500 Swing</h1>\n        <p style=\"color: #22d3ee; margin: 10px 0 0 0; font-size: 16px;\">Turn Your Bat Into a Better Swing</p>\n      </td>\n    </tr>\n    <tr>\n      <td style=\"padding: 40px 20px;\">\n        <h2 style=\"color: #0f172a; margin: 0 0 20px 0;\">Welcome aboard, ${firstName}! \uD83C\uDF89</h2>\n        \n        <p style=\"color: #475569; line-height: 1.6; margin: 0 0 20px 0;\">\n          Thank you for joining $500 Swing with the <strong>${planName}</strong> plan. You're about to transform your swing with real analysis from college players who know what it takes to succeed.\n        </p>\n        \n        <div style=\"background-color: #f0fdfa; border-left: 4px solid #14b8a6; padding: 20px; margin: 30px 0;\">\n          <h3 style=\"color: #0f172a; margin: 0 0 10px 0;\">What's Next?</h3>\n          <ul style=\"color: #475569; line-height: 1.8; margin: 0; padding-left: 20px;\">\n            <li>Download our iOS app from the App Store</li>\n            <li>Record your swing from the side angle</li>\n            <li>Submit for analysis</li>\n            <li>Get frame-by-frame feedback within 48 hours</li>\n          </ul>\n        </div>\n        \n        <div style=\"background-color: #fef3c7; border-left: 4px solid #f59e0b; padding: 20px; margin: 30px 0;\">\n          <h3 style=\"color: #0f172a; margin: 0 0 10px 0;\">Pro Tips for Best Results:</h3>\n          <ul style=\"color: #475569; line-height: 1.8; margin: 0; padding-left: 20px;\">\n            <li><strong>Camera angle:</strong> Side view at hip height</li>\n            <li><strong>Lighting:</strong> Well-lit, avoid shadows on the batter</li>\n            <li><strong>Frame the shot:</strong> Include full body and bat throughout swing</li>\n            <li><strong>Multiple swings:</strong> Record 3-5 swings for best analysis</li>\n          </ul>\n        </div>\n        \n        <div style=\"text-align: center; margin: 40px 0;\">\n          <a href=\"http://localhost:5004/account\" style=\"display: inline-block; padding: 15px 30px; background-color: #14b8a6; color: #ffffff; text-decoration: none; border-radius: 8px; font-weight: bold;\">Access Your Account</a>\n        </div>\n        \n        <p style=\"color: #475569; line-height: 1.6; margin: 20px 0 0 0;\">\n          Remember: it's not about the bat\u2014it's about the mechanic. We're here to help you build a $500 swing with the bat you already have.\n        </p>\n        \n        <p style=\"color: #475569; line-height: 1.6; margin: 20px 0 0 0;\">\n          Questions? Reply to this email or visit your account dashboard.\n        </p>\n        \n        <p style=\"color: #475569; margin: 30px 0 0 0;\">\n          Best,<br>\n          The $500 Swing Team\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td style=\"padding: 20px; background-color: #f8fafc; text-align: center;\">\n        <p style=\"color: #94a3b8; margin: 0; font-size: 14px;\">\n          \u00A9 2024 $500 Swing \u00B7 A Bat Digest Product<br>\n          <a href=\"http://localhost:5004/account\" style=\"color: #14b8a6; text-decoration: none;\">Manage Account</a> \u00B7 \n          <a href=\"mailto:support@batdigest.com\" style=\"color: #14b8a6; text-decoration: none;\">Support</a>\n        </p>\n      </td>\n    </tr>\n  </table>\n</body>\n</html>\n    `,\n  }),\n\n  analysisReady: (firstName: string, analysisId: string) => ({\n    subject: 'Your Swing Analysis is Ready!',\n    html: `\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n</head>\n<body style=\"margin: 0; padding: 0; font-family: Arial, sans-serif; background-color: #f4f4f4;\">\n  <table cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"max-width: 600px; margin: 0 auto; background-color: #ffffff;\">\n    <tr>\n      <td style=\"padding: 40px 20px; text-align: center; background: linear-gradient(135deg, #0f172a 0%, #14b8a6 100%);\">\n        <h1 style=\"color: #ffffff; margin: 0; font-size: 32px;\">Analysis Complete!</h1>\n      </td>\n    </tr>\n    <tr>\n      <td style=\"padding: 40px 20px;\">\n        <h2 style=\"color: #0f172a; margin: 0 0 20px 0;\">Hey ${firstName}!</h2>\n        \n        <p style=\"color: #475569; line-height: 1.6; margin: 0 0 20px 0;\">\n          Great news! Our coaches have completed your swing analysis. You can now view your personalized feedback, frame-by-frame breakdown, and recommended drills.\n        </p>\n        \n        <div style=\"text-align: center; margin: 40px 0;\">\n          <a href=\"http://localhost:5004/analysis/${analysisId}\" style=\"display: inline-block; padding: 15px 30px; background-color: #14b8a6; color: #ffffff; text-decoration: none; border-radius: 8px; font-weight: bold;\">View Your Analysis</a>\n        </div>\n        \n        <p style=\"color: #475569; line-height: 1.6; margin: 20px 0 0 0;\">\n          Keep practicing and submit your next video to track your progress!\n        </p>\n      </td>\n    </tr>\n  </table>\n</body>\n</html>\n    `,\n  }),\n};", "import { Env, SubmissionRequest, R2UploadResponse } from './types';\nimport { sendEmail, sendWelcomeEmailViaService, emailTemplates } from './email';\n\nexport default {\n  async fetch(request: Request, env: Env): Promise<Response> {\n    const url = new URL(request.url);\n    \n    // CORS headers\n    const corsHeaders = {\n      'Access-Control-Allow-Origin': env.CORS_ORIGIN || '*',\n      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    };\n\n    // Handle CORS preflight\n    if (request.method === 'OPTIONS') {\n      return new Response(null, { headers: corsHeaders });\n    }\n\n    try {\n      // Route handling\n      if (url.pathname === '/api/submissions/init' && request.method === 'POST') {\n        return await handleSubmissionInit(request, env, corsHeaders);\n      }\n      \n      if (url.pathname === '/api/submissions/confirm' && request.method === 'POST') {\n        return await handleSubmissionConfirm(request, env, corsHeaders);\n      }\n      \n      if (url.pathname === '/api/queue' && request.method === 'GET') {\n        return await handleGetQueue(request, env, corsHeaders);\n      }\n      \n      if (url.pathname === '/api/auth/signup' && request.method === 'POST') {\n        return await handleSignup(request, env, corsHeaders);\n      }\n      \n      if (url.pathname === '/api/auth/login' && request.method === 'POST') {\n        return await handleLogin(request, env, corsHeaders);\n      }\n      \n      if (url.pathname === '/api/test-email' && request.method === 'GET') {\n        // Test endpoint for email\n        const emailTemplate = emailTemplates.welcome('Brian', 'Performance');\n        const emailSent = await sendEmail({\n          to: 'brianduryea@gmail.com',\n          from: 'noreply@batdigest.com',\n          subject: 'Test Email from $500 Swing',\n          html: emailTemplate.html,\n        });\n        \n        return new Response(JSON.stringify({ \n          success: emailSent,\n          message: emailSent ? 'Test email sent!' : 'Failed to send email'\n        }), {\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n        });\n      }\n\n      return new Response('Not Found', { status: 404, headers: corsHeaders });\n    } catch (error) {\n      console.error('Worker error:', error);\n      return new Response(\n        JSON.stringify({ error: 'Internal Server Error' }), \n        { \n          status: 500, \n          headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n        }\n      );\n    }\n  },\n\n  async queue(batch: MessageBatch, env: Env): Promise<void> {\n    // Process video queue items\n    for (const message of batch.messages) {\n      await processVideoSubmission(message.body, env);\n      message.ack();\n    }\n  }\n};\n\nasync function handleSubmissionInit(request: Request, env: Env, corsHeaders: any): Promise<Response> {\n  const data: SubmissionRequest = await request.json();\n  \n  // Create database record\n  const submissionId = data.submissionId || crypto.randomUUID();\n  const timestamp = new Date().toISOString();\n  const r2Key = `submissions/${submissionId}/video.mp4`;\n  \n  // Insert into D1 database\n  await env.DB.prepare(`\n    INSERT INTO submissions (\n      id, account_id, email, player_name, height, weight, age, \n      batting_stance, submission_date, player_notes, video_r2_key, \n      status, created_at, metadata, camera_angle, team, position,\n      skill_level, bat_size, bat_type, league, age_group\n    ) VALUES (\n      ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?\n    )\n  `).bind(\n    submissionId,\n    data.athleteId,\n    data.athleteInfo?.email || '',\n    data.athleteName,\n    data.athleteInfo?.height || null,\n    data.athleteInfo?.weight || null,\n    data.athleteInfo?.age || null,\n    data.athleteInfo?.battingStance || 'right',\n    timestamp,\n    data.notes || null,\n    r2Key,\n    'uploading',\n    timestamp,\n    JSON.stringify(data.metadata),\n    data.angle,\n    data.athleteInfo?.team || null,\n    data.athleteInfo?.position || null,\n    data.athleteInfo?.skillLevel || null,\n    data.athleteInfo?.batSize || null,\n    data.athleteInfo?.batType || null,\n    data.athleteInfo?.league || null,\n    data.athleteInfo?.ageGroup || null\n  ).run();\n  \n  // Generate pre-signed upload URL for R2\n  const uploadUrl = await generateR2UploadUrl(env, r2Key);\n  \n  const response: R2UploadResponse = {\n    uploadURL: uploadUrl,\n    r2Key: r2Key,\n    submissionId: submissionId\n  };\n  \n  return new Response(JSON.stringify(response), {\n    headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n  });\n}\n\nasync function handleSubmissionConfirm(request: Request, env: Env, corsHeaders: any): Promise<Response> {\n  const { submissionId, r2Key } = await request.json();\n  \n  // Update status in database\n  await env.DB.prepare(`\n    UPDATE submissions \n    SET status = 'processing', updated_at = ?\n    WHERE id = ?\n  `).bind(new Date().toISOString(), submissionId).run();\n  \n  // Add to processing queue\n  await env.VIDEO_QUEUE.send({\n    submissionId,\n    r2Key,\n    timestamp: Date.now()\n  });\n  \n  return new Response(JSON.stringify({ success: true }), {\n    headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n  });\n}\n\nasync function handleGetQueue(request: Request, env: Env, corsHeaders: any): Promise<Response> {\n  // Get all pending submissions for coaches to analyze\n  const { results } = await env.DB.prepare(`\n    SELECT * FROM submissions \n    WHERE status IN ('processing', 'ready')\n    ORDER BY created_at DESC\n    LIMIT 50\n  `).all();\n  \n  return new Response(JSON.stringify(results), {\n    headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n  });\n}\n\nasync function generateR2UploadUrl(env: Env, key: string): Promise<string> {\n  // Generate a pre-signed URL for direct upload to R2\n  // This would use R2's presigned URL functionality\n  // For now, returning a placeholder - you'll need to implement based on Cloudflare's R2 API\n  \n  const url = new URL(`https://r2.batdigest.com/${key}`);\n  \n  // In production, you'd generate a proper pre-signed URL here\n  // using R2's API or AWS SDK with R2 compatibility\n  \n  return url.toString();\n}\n\nasync function handleSignup(request: Request, env: Env, corsHeaders: any): Promise<Response> {\n  const { email, password, firstName, lastName, planType } = await request.json();\n  \n  if (!email || !password || !firstName || !lastName) {\n    return new Response(JSON.stringify({ error: 'Missing required fields' }), {\n      status: 400,\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    });\n  }\n  \n  const accountId = crypto.randomUUID();\n  const timestamp = new Date().toISOString();\n  \n  try {\n    // Check if email already exists\n    const existing = await env.DB.prepare(\n      'SELECT id FROM accounts WHERE email = ?'\n    ).bind(email).first();\n    \n    if (existing) {\n      return new Response(JSON.stringify({ error: 'Email already exists' }), {\n        status: 400,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n      });\n    }\n    \n    // Create account (storing password as plain text for demo - in production use proper hashing!)\n    await env.DB.prepare(`\n      INSERT INTO accounts (id, name, email, type, subscription, created_at, updated_at)\n      VALUES (?, ?, ?, ?, ?, ?, ?)\n    `).bind(\n      accountId,\n      `${firstName} ${lastName}`,\n      email,\n      'individual',\n      planType || 'starter',\n      timestamp,\n      timestamp\n    ).run();\n    \n    // For demo purposes, we'll store the password in a simple way\n    // In production, use proper password hashing and a separate auth table\n    \n    const user = {\n      id: accountId,\n      email,\n      firstName,\n      lastName,\n      planType: planType || 'starter',\n      subscriptionStatus: 'active',\n      createdAt: timestamp,\n      nextBillingDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString()\n    };\n    \n    // Send welcome email using the email service binding\n    const emailSent = await sendWelcomeEmailViaService(env.EMAIL_SERVICE, email, firstName, planType || 'Starter');\n    \n    if (emailSent) {\n      console.log(`Welcome email sent to ${email}`);\n    } else {\n      console.error(`Failed to send welcome email to ${email}`);\n    }\n    \n    return new Response(JSON.stringify({ \n      success: true, \n      user,\n      token: `mock-token-${accountId}`, // Simple token for demo\n      emailSent\n    }), {\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    });\n  } catch (error) {\n    console.error('Signup error:', error);\n    return new Response(JSON.stringify({ error: 'Failed to create account' }), {\n      status: 500,\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    });\n  }\n}\n\nasync function handleLogin(request: Request, env: Env, corsHeaders: any): Promise<Response> {\n  const { email, password } = await request.json();\n  \n  if (!email || !password) {\n    return new Response(JSON.stringify({ error: 'Missing email or password' }), {\n      status: 400,\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    });\n  }\n  \n  try {\n    // Get account by email\n    const account = await env.DB.prepare(\n      'SELECT * FROM accounts WHERE email = ?'\n    ).bind(email).first();\n    \n    if (!account) {\n      return new Response(JSON.stringify({ error: 'Invalid credentials' }), {\n        status: 401,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n      });\n    }\n    \n    // For demo, we're not checking password properly\n    // In production, verify hashed password\n    \n    const [firstName, ...lastNameParts] = account.name.split(' ');\n    const lastName = lastNameParts.join(' ');\n    \n    const user = {\n      id: account.id,\n      email: account.email,\n      firstName,\n      lastName,\n      planType: account.subscription,\n      subscriptionStatus: 'active',\n      createdAt: account.created_at,\n      nextBillingDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString()\n    };\n    \n    return new Response(JSON.stringify({ \n      success: true, \n      user,\n      token: `mock-token-${account.id}`\n    }), {\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    });\n  } catch (error) {\n    console.error('Login error:', error);\n    return new Response(JSON.stringify({ error: 'Login failed' }), {\n      status: 500,\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    });\n  }\n}\n\nasync function processVideoSubmission(data: any, env: Env): Promise<void> {\n  const { submissionId, r2Key } = data;\n  \n  try {\n    // Here you would:\n    // 1. Generate thumbnail\n    // 2. Extract additional metadata if needed\n    // 3. Optionally transcode via Cloudflare Stream\n    // 4. Update database status\n    \n    await env.DB.prepare(`\n      UPDATE submissions \n      SET status = 'ready', updated_at = ?\n      WHERE id = ?\n    `).bind(new Date().toISOString(), submissionId).run();\n    \n    console.log(`Processed submission ${submissionId}`);\n  } catch (error) {\n    console.error(`Failed to process ${submissionId}:`, error);\n    \n    await env.DB.prepare(`\n      UPDATE submissions \n      SET status = 'failed', error_message = ?, updated_at = ?\n      WHERE id = ?\n    `).bind(\n      error.message,\n      new Date().toISOString(),\n      submissionId\n    ).run();\n  }\n}", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/brianduryea/Coding_Projects/batdigest-swing-analysis-project/cloudflare-backend/src/index.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/opt/homebrew/lib/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/opt/homebrew/lib/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/brianduryea/Coding_Projects/batdigest-swing-analysis-project/cloudflare-backend/src/index.ts\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/brianduryea/Coding_Projects/batdigest-swing-analysis-project/cloudflare-backend/.wrangler/tmp/bundle-RMX6V4/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/opt/homebrew/lib/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/brianduryea/Coding_Projects/batdigest-swing-analysis-project/cloudflare-backend/.wrangler/tmp/bundle-RMX6V4/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/brianduryea/Coding_Projects/batdigest-swing-analysis-project/cloudflare-backend/.wrangler/tmp/bundle-RMX6V4/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
