var s;(function(r){r.LOAD="LOAD",r.EXEC="EXEC",r.FFPROBE="FFPROBE",r.WRITE_FILE="WRITE_FILE",r.READ_FILE="READ_FILE",r.DELETE_FILE="DELETE_FILE",r.RENAME="RENAME",r.CREATE_DIR="CREATE_DIR",r.LIST_DIR="LIST_DIR",r.DELETE_DIR="DELETE_DIR",r.ERROR="ERROR",r.DOWNLOAD="DOWNLOAD",r.PROGRESS="PROGRESS",r.LOG="LOG",r.MOUNT="MOUNT",r.UNMOUNT="UNMOUNT"})(s||(s={}));const R=(()=>{let r=0;return()=>r++})(),u=new Error("ffmpeg is not loaded, call `await ffmpeg.load()` first"),h=new Error("called FFmpeg.terminate()");class m{#t=null;#a={};#r={};#s=[];#n=[];loaded=!1;#i=()=>{this.#t&&(this.#t.onmessage=({data:{id:e,type:t,data:a}})=>{switch(t){case s.LOAD:this.loaded=!0,this.#a[e](a);break;case s.MOUNT:case s.UNMOUNT:case s.EXEC:case s.FFPROBE:case s.WRITE_FILE:case s.READ_FILE:case s.DELETE_FILE:case s.RENAME:case s.CREATE_DIR:case s.LIST_DIR:case s.DELETE_DIR:this.#a[e](a);break;case s.LOG:this.#s.forEach(n=>n(a));break;case s.PROGRESS:this.#n.forEach(n=>n(a));break;case s.ERROR:this.#r[e](a);break}delete this.#a[e],delete this.#r[e]})};#e=({type:e,data:t},a=[],n)=>this.#t?new Promise((l,o)=>{const i=R();this.#t&&this.#t.postMessage({id:i,type:e,data:t},a),this.#a[i]=l,this.#r[i]=o,n?.addEventListener("abort",()=>{o(new DOMException(`Message # ${i} was aborted`,"AbortError"))},{once:!0})}):Promise.reject(u);on(e,t){e==="log"?this.#s.push(t):e==="progress"&&this.#n.push(t)}off(e,t){e==="log"?this.#s=this.#s.filter(a=>a!==t):e==="progress"&&(this.#n=this.#n.filter(a=>a!==t))}load=({classWorkerURL:e,...t}={},{signal:a}={})=>(this.#t||(this.#t=e?new Worker(new URL(e,import.meta.url),{type:"module"}):new Worker(new URL("/assets/worker-BAOIWoxA.js",import.meta.url),{type:"module"}),this.#i()),this.#e({type:s.LOAD,data:t},void 0,a));exec=(e,t=-1,{signal:a}={})=>this.#e({type:s.EXEC,data:{args:e,timeout:t}},void 0,a);ffprobe=(e,t=-1,{signal:a}={})=>this.#e({type:s.FFPROBE,data:{args:e,timeout:t}},void 0,a);terminate=()=>{const e=Object.keys(this.#r);for(const t of e)this.#r[t](h),delete this.#r[t],delete this.#a[t];this.#t&&(this.#t.terminate(),this.#t=null,this.loaded=!1)};writeFile=(e,t,{signal:a}={})=>{const n=[];return t instanceof Uint8Array&&n.push(t.buffer),this.#e({type:s.WRITE_FILE,data:{path:e,data:t}},n,a)};mount=(e,t,a)=>{const n=[];return this.#e({type:s.MOUNT,data:{fsType:e,options:t,mountPoint:a}},n)};unmount=e=>{const t=[];return this.#e({type:s.UNMOUNT,data:{mountPoint:e}},t)};readFile=(e,t="binary",{signal:a}={})=>this.#e({type:s.READ_FILE,data:{path:e,encoding:t}},void 0,a);deleteFile=(e,{signal:t}={})=>this.#e({type:s.DELETE_FILE,data:{path:e}},void 0,t);rename=(e,t,{signal:a}={})=>this.#e({type:s.RENAME,data:{oldPath:e,newPath:t}},void 0,a);createDir=(e,{signal:t}={})=>this.#e({type:s.CREATE_DIR,data:{path:e}},void 0,t);listDir=(e,{signal:t}={})=>this.#e({type:s.LIST_DIR,data:{path:e}},void 0,t);deleteDir=(e,{signal:t}={})=>this.#e({type:s.DELETE_DIR,data:{path:e}},void 0,t)}var f;(function(r){r.MEMFS="MEMFS",r.NODEFS="NODEFS",r.NODERAWFS="NODERAWFS",r.IDBFS="IDBFS",r.WORKERFS="WORKERFS",r.PROXYFS="PROXYFS"})(f||(f={}));const D=r=>new Promise((e,t)=>{const a=new FileReader;a.onload=()=>{const{result:n}=a;n instanceof ArrayBuffer?e(new Uint8Array(n)):e(new Uint8Array)},a.onerror=n=>{t(Error(`File could not be read! Code=${n?.target?.error?.code||-1}`))},a.readAsArrayBuffer(r)}),p=async r=>{let e;if(typeof r=="string")/data:_data\/([a-zA-Z]*);base64,([^"]*)/.test(r)?e=atob(r.split(",")[1]).split("").map(t=>t.charCodeAt(0)):e=await(await fetch(r)).arrayBuffer();else if(r instanceof URL)e=await(await fetch(r)).arrayBuffer();else if(r instanceof File||r instanceof Blob)e=await D(r);else return new Uint8Array;return new Uint8Array(e)};let c=null,E=null;async function w(){return c&&E?(await E,c):(c=new m,E=(async()=>{try{const r="https://unpkg.com/@ffmpeg/core@0.12.6/dist/esm";await c.load({coreURL:`${r}/ffmpeg-core.js`,wasmURL:`${r}/ffmpeg-core.wasm`}),console.log("[MP4Transcode] FFmpeg loaded successfully")}catch(r){throw console.error("[MP4Transcode] Failed to load FFmpeg:",r),r}})(),await E,c)}async function O(r,e){try{console.log("[MP4Transcode] Starting transcode, input size:",r.size);const t=await w();e&&t.on("progress",({progress:i})=>{const d=Math.min(99,Math.max(0,Math.round(i*100)));console.log(`[MP4Transcode] Progress: ${d}%`),e(d)});const a="input.webm",n="output.mp4";await t.writeFile(a,await p(r)),console.log("[MP4Transcode] Input file written"),await t.exec(["-i",a,"-c:v","libx264","-preset","fast","-crf","23","-c:a","aac","-b:a","128k","-movflags","+faststart","-pix_fmt","yuv420p","-vf","scale=trunc(iw/2)*2:trunc(ih/2)*2",n]),console.log("[MP4Transcode] Transcode complete");const l=await t.readFile(n),o=new Blob([l],{type:"video/mp4"});console.log("[MP4Transcode] Output MP4 size:",o.size),e&&e(100);try{await t.deleteFile(a),await t.deleteFile(n)}catch(i){console.warn("[MP4Transcode] Cleanup error:",i)}return e&&t.off("progress"),o}catch(t){throw console.error("[MP4Transcode] Transcode failed:",t),new Error(`Failed to transcode video: ${t}`)}}export{O as transcodeWebMToMP4};
