var s;(function(t){t.LOAD="LOAD",t.EXEC="EXEC",t.FFPROBE="FFPROBE",t.WRITE_FILE="WRITE_FILE",t.READ_FILE="READ_FILE",t.DELETE_FILE="DELETE_FILE",t.RENAME="RENAME",t.CREATE_DIR="CREATE_DIR",t.LIST_DIR="LIST_DIR",t.DELETE_DIR="DELETE_DIR",t.ERROR="ERROR",t.DOWNLOAD="DOWNLOAD",t.PROGRESS="PROGRESS",t.LOG="LOG",t.MOUNT="MOUNT",t.UNMOUNT="UNMOUNT"})(s||(s={}));const D=(()=>{let t=0;return()=>t++})(),p=new Error("ffmpeg is not loaded, call `await ffmpeg.load()` first"),w=new Error("called FFmpeg.terminate()");class O{#t=null;#a={};#r={};#s=[];#i=[];loaded=!1;#n=()=>{this.#t&&(this.#t.onmessage=({data:{id:e,type:r,data:a}})=>{switch(r){case s.LOAD:this.loaded=!0,this.#a[e](a);break;case s.MOUNT:case s.UNMOUNT:case s.EXEC:case s.FFPROBE:case s.WRITE_FILE:case s.READ_FILE:case s.DELETE_FILE:case s.RENAME:case s.CREATE_DIR:case s.LIST_DIR:case s.DELETE_DIR:this.#a[e](a);break;case s.LOG:this.#s.forEach(i=>i(a));break;case s.PROGRESS:this.#i.forEach(i=>i(a));break;case s.ERROR:this.#r[e](a);break}delete this.#a[e],delete this.#r[e]})};#e=({type:e,data:r},a=[],i)=>this.#t?new Promise((o,E)=>{const n=D();this.#t&&this.#t.postMessage({id:n,type:e,data:r},a),this.#a[n]=o,this.#r[n]=E,i?.addEventListener("abort",()=>{E(new DOMException(`Message # ${n} was aborted`,"AbortError"))},{once:!0})}):Promise.reject(p);on(e,r){e==="log"?this.#s.push(r):e==="progress"&&this.#i.push(r)}off(e,r){e==="log"?this.#s=this.#s.filter(a=>a!==r):e==="progress"&&(this.#i=this.#i.filter(a=>a!==r))}load=({classWorkerURL:e,...r}={},{signal:a}={})=>(this.#t||(this.#t=e?new Worker(new URL(e,import.meta.url),{type:"module"}):new Worker(new URL("/assets/worker-BAOIWoxA.js",import.meta.url),{type:"module"}),this.#n()),this.#e({type:s.LOAD,data:r},void 0,a));exec=(e,r=-1,{signal:a}={})=>this.#e({type:s.EXEC,data:{args:e,timeout:r}},void 0,a);ffprobe=(e,r=-1,{signal:a}={})=>this.#e({type:s.FFPROBE,data:{args:e,timeout:r}},void 0,a);terminate=()=>{const e=Object.keys(this.#r);for(const r of e)this.#r[r](w),delete this.#r[r],delete this.#a[r];this.#t&&(this.#t.terminate(),this.#t=null,this.loaded=!1)};writeFile=(e,r,{signal:a}={})=>{const i=[];return r instanceof Uint8Array&&i.push(r.buffer),this.#e({type:s.WRITE_FILE,data:{path:e,data:r}},i,a)};mount=(e,r,a)=>{const i=[];return this.#e({type:s.MOUNT,data:{fsType:e,options:r,mountPoint:a}},i)};unmount=e=>{const r=[];return this.#e({type:s.UNMOUNT,data:{mountPoint:e}},r)};readFile=(e,r="binary",{signal:a}={})=>this.#e({type:s.READ_FILE,data:{path:e,encoding:r}},void 0,a);deleteFile=(e,{signal:r}={})=>this.#e({type:s.DELETE_FILE,data:{path:e}},void 0,r);rename=(e,r,{signal:a}={})=>this.#e({type:s.RENAME,data:{oldPath:e,newPath:r}},void 0,a);createDir=(e,{signal:r}={})=>this.#e({type:s.CREATE_DIR,data:{path:e}},void 0,r);listDir=(e,{signal:r}={})=>this.#e({type:s.LIST_DIR,data:{path:e}},void 0,r);deleteDir=(e,{signal:r}={})=>this.#e({type:s.DELETE_DIR,data:{path:e}},void 0,r)}var h;(function(t){t.MEMFS="MEMFS",t.NODEFS="NODEFS",t.NODERAWFS="NODERAWFS",t.IDBFS="IDBFS",t.WORKERFS="WORKERFS",t.PROXYFS="PROXYFS"})(h||(h={}));const m=t=>new Promise((e,r)=>{const a=new FileReader;a.onload=()=>{const{result:i}=a;i instanceof ArrayBuffer?e(new Uint8Array(i)):e(new Uint8Array)},a.onerror=i=>{r(Error(`File could not be read! Code=${i?.target?.error?.code||-1}`))},a.readAsArrayBuffer(t)}),L=async t=>{let e;if(typeof t=="string")/data:_data\/([a-zA-Z]*);base64,([^"]*)/.test(t)?e=atob(t.split(",")[1]).split("").map(r=>r.charCodeAt(0)):e=await(await fetch(t)).arrayBuffer();else if(t instanceof URL)e=await(await fetch(t)).arrayBuffer();else if(t instanceof File||t instanceof Blob)e=await m(t);else return new Uint8Array;return new Uint8Array(e)};let c=null,d=null;async function I(){return c&&d?(await d,c):(c=new O,d=(async()=>{try{const t="https://unpkg.com/@ffmpeg/core@0.12.6/dist/esm";await c.load({coreURL:`${t}/ffmpeg-core.js`,wasmURL:`${t}/ffmpeg-core.wasm`}),console.log("[MP4Transcode] FFmpeg loaded successfully")}catch(t){throw console.error("[MP4Transcode] Failed to load FFmpeg:",t),t}})(),await d,c)}async function A(t,e,r){try{console.log("[MP4Transcode] Starting transcode, input size:",t.size);const a=await I();(e||r)&&a.on("progress",({progress:l,time:R})=>{if(r&&R!==void 0){const f=R/1e6,u=Math.floor(f*30);r(u)}if(e){const f=Math.min(99,Math.max(0,Math.round(l*100)));e(f)}});const i="input.webm",o="output.mp4";await a.writeFile(i,await L(t)),console.log("[MP4Transcode] Input file written"),await a.exec(["-i",i,"-c:v","libx264","-preset","fast","-crf","23","-c:a","aac","-b:a","128k","-movflags","+faststart","-pix_fmt","yuv420p","-vf","scale=trunc(iw/2)*2:trunc(ih/2)*2",o]),console.log("[MP4Transcode] Transcode complete");const E=await a.readFile(o),n=new Blob([E],{type:"video/mp4"});console.log("[MP4Transcode] Output MP4 size:",n.size),e&&e(100);try{await a.deleteFile(i),await a.deleteFile(o)}catch(l){console.warn("[MP4Transcode] Cleanup error:",l)}return e&&a.off("progress"),n}catch(a){throw console.error("[MP4Transcode] Transcode failed:",a),new Error(`Failed to transcode video: ${a}`)}}export{A as transcodeWebMToMP4};
